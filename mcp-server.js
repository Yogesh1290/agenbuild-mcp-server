/**
 * ==============================================================================
 * My Code Project (MCP) Bridge Server - SECURE & ROBUST VERSION
 * ==============================================================================
 *
 * Description:
 * This script runs a local WebSocket server on your machine. The web-based AI
 * Code Assistant connects to this server to write files directly into your
 * project folder, enabling real-time, local development.
 *
 * ROBUSTNESS & PATH CORRECTION:
 * This server is designed to work correctly whether you run it from a parent
 * "projects" directory OR from directly inside the specific project folder you
 * are editing. It intelligently corrects file paths to prevent creating
 * incorrect nested directories (e.g., `my-project/my-project/src`).
 *
 * SECURITY:
 * This version includes critical security checks to prevent "Path Traversal"
 * attacks. It ensures that the web application can ONLY read/write files
 * *inside* the directory where this script is running. It cannot access
 * parent directories (e.g., using '../') or other sensitive locations on your
 * computer.
 *
 * ---
 *
 * SETUP & USAGE:
 *
 * 1.  Prerequisites: You must have Node.js installed on your computer.
 *     (Download from https://nodejs.org/)
 *
 * 2.  Dependencies: This script uses the 'ws' library. Install it by running
 *     this command in your terminal in your project's root directory:
 *     >> npm install ws
 *
 * 3.  Placement: Save this file as `mcp-server.js` in your project's root
 *     directory, or a parent directory that contains multiple projects.
 *
 * 4.  Run the Server: Open a terminal, navigate to your desired directory,
 *     and run the script with Node.js:
 *     >> node mcp-server.js
 *
 * 5.  Connect: Once the server is running, the AI Code Assistant web app
 *     will automatically detect and connect to it. The "Local Sync" status
 *     indicator in the app will turn green. Any code generated by the AI will
 *     now be saved directly to your local project files.
 *
 * 6.  Stop the Server: To stop the server, go back to your terminal window
 *     and press `Ctrl + C`.
 *
 * ==============================================================================
 */

const { WebSocketServer } = require('ws');
const fs = require('fs').promises;
const path = require('path');

const PORT = 3001;
// Define the project root as the current working directory.
// All file operations are restricted to this directory and its subdirectories.
const PROJECT_ROOT = process.cwd();

const server = new WebSocketServer({ port: PORT });

server.on('connection', ws => {
  console.log('\n‚úÖ Client connected. Real-time file sync is now active.');
  console.log('   AI-generated changes will be saved to your local files.');

  ws.on('message', async (message) => {
    let data;
    try {
      data = JSON.parse(message.toString());
    } catch (e) {
      console.error('‚ùå Error: Received invalid JSON message from client.', e.message);
      return;
    }
    
    const { type, payload } = data;

    if (type === 'file-update' && payload?.files) {
      console.log('\nüîÑ Receiving file updates from the AI...');

      const projectFolderName = path.basename(PROJECT_ROOT);

      for (const originalPath in payload.files) {
        let effectivePath = originalPath;

        // --- INTELLIGENT PATH CORRECTION ---
        const pathSegments = originalPath.replace(/\\/g, '/').split('/');
        if (pathSegments.length > 1 && pathSegments[0] === projectFolderName) {
          effectivePath = path.join(...pathSegments.slice(1));
          console.log(`   Path Adjustment: Corrected "${originalPath}" -> "${effectivePath}"`);
        }

        // --- SECURITY: PATH TRAVERSAL PREVENTION ---
        const intendedPath = path.resolve(PROJECT_ROOT, effectivePath);
        const relativeFromRoot = path.relative(PROJECT_ROOT, intendedPath);
        if (relativeFromRoot.startsWith('..') || path.isAbsolute(relativeFromRoot)) {
          console.warn(`\nüö® SECURITY ALERT: Denied attempt to access a file outside the project directory.`);
          console.warn(`   Target path: "${originalPath}"`);
          console.warn(`   This request has been blocked.\n`);
          continue;
        }

        const content = payload.files[originalPath];

        try {
          if (content === null) {
            await fs.unlink(intendedPath);
            console.log(`   - Deleted: ${effectivePath}`);
          } else {
            const dir = path.dirname(intendedPath);
            await fs.mkdir(dir, { recursive: true });
            await fs.writeFile(intendedPath, content);
            console.log(`   + Updated: ${effectivePath}`);
          }
        } catch (err) {
          if (err.code === 'ENOENT' && content === null) {
              console.warn(`   - Skipped deletion (file not found): ${effectivePath}`);
          } else {
              console.error(`   ‚ùå Error processing file "${effectivePath}":`, err.message);
          }
        }
      }
      console.log('‚úÖ File updates complete.');
    }
  });

  ws.on('close', () => {
    console.log('\nüîå Client disconnected. File sync is paused.');
  });

  ws.on('error', (error) => {
    console.error('‚ùå WebSocket error:', error.message);
  });
});

console.log('====================================================');
console.log('     üöÄ Secure & Robust MCP Bridge Server Started üöÄ      ');
console.log('====================================================');
console.log(`Listening on: ws://localhost:${PORT}`);
console.log(`Project Root (safe directory): ${PROJECT_ROOT}`);
console.log('\nWaiting for a connection from the web app...');
console.log('Press Ctrl + C to stop the server.');